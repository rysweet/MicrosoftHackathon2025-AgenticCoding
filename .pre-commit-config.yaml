# Comprehensive Pre-commit Configuration
# Enforces same quality gates as CI to catch issues before pushing
# https://pre-commit.com/

# Skip specific hooks: SKIP=hook_id git commit
# Bypass all hooks: git commit --no-verify

default_language_version:
  python: python3

repos:
  # Essential file and merge checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: check-merge-conflict
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: ["--maxkb=500"]
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Python - Comprehensive Ruff linting with strict rules
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.13.0
    hooks:
      - id: ruff
        args: [
            --fix,
            --select=ALL, # Enable all rules
            --ignore=D, # Ignore docstring rules (too verbose for pre-commit)
            --ignore=ANN101,
            ANN102, # Ignore self/cls annotations
            --ignore=COM812,
            COM819, # Ignore trailing comma conflicts with formatter
            --ignore=ISC001, # Ignore import sorting conflict with formatter
            --ignore=Q000,
            Q001,
            Q002,
            Q003, # Ignore quote style conflicts
          ]
      - id: ruff-format

  # Security scanning with bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, --format=custom, --skip=B101, B601]
        exclude: '^tests/.*\.py$'

  # Python - Type checking with pyright (strict mode)
  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.405
    hooks:
      - id: pyright
        exclude: '^\.claude/tools/test-utilities/.*\.py$'

  # JavaScript/TypeScript/Markdown formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types_or: [javascript, jsx, ts, tsx, json, yaml, markdown]

  # Secret detection - CRITICAL for security
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        exclude: .*\.lock$|package-lock\.json$

  # Custom quality gates to match CI standards
  - repo: local
    hooks:
      # Enforce logging over print statements in production code
      - id: no-print-statements
        name: No print statements in production code
        entry: bash
        args:
          - -c
          - |
            files_with_issues=()
            for file in $(find src/ -name "*.py" -not -path "*/tests/*"); do
              if grep -n "print(" "$file" | grep -v "# noqa" | grep -v "console.print" | grep -v "^[[:space:]]*#" > /dev/null; then
                files_with_issues+=("$file")
              fi
            done
            if [ ${#files_with_issues[@]} -gt 0 ]; then
              echo "ERROR: Found print() statements without noqa in production code:"
              printf '  %s\n' "${files_with_issues[@]}"
              exit 1
            fi
        language: system
        pass_filenames: false
        files: '^src/.*\.py$'

      # Check for development artifacts in production code
      - id: no-dev-artifacts
        name: No development artifacts in production code
        entry: bash
        args:
          - -c
          - |
            files_with_issues=()
            for file in $(find src/ -name "*.py" -not -path "*/tests/*"); do
              if grep -n -i "fixme\|todo\|xxx\|hack" "$file" | grep -v "# noqa" > /dev/null; then
                files_with_issues+=("$file")
              fi
            done
            if [ ${#files_with_issues[@]} -gt 0 ]; then
              echo "ERROR: Found development artifacts without noqa in production code:"
              printf '  %s\n' "${files_with_issues[@]}"
              exit 1
            fi
        language: system
        pass_filenames: false
        files: '^src/.*\.py$'

      # Ensure proper error handling (no bare except clauses)
      - id: no-bare-except
        name: No bare except clauses
        entry: bash
        args:
          - -c
          - |
            if find src/ -name "*.py" -exec grep -l "except:" {} \; | grep -v "# noqa"; then
              echo "ERROR: Found bare except clauses. Use specific exception types."
              exit 1
            fi
        language: system
        pass_filenames: false
        files: '^src/.*\.py$'

      # Check for potential security issues in error messages
      - id: secure-error-messages
        name: Check for secure error message patterns
        entry: bash
        args:
          - -c
          - |
            if find src/ -name "*.py" -exec grep -l -E "(Exception.*path|Error.*password|\.py.*line)" {} \; | grep -v "# noqa"; then
              echo "WARNING: Found potentially sensitive information in error messages."
            fi
        language: system
        pass_filenames: false
        files: '^src/.*\.py$'
